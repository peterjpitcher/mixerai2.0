---
description: 
globs: 
alwaysApply: true
---
# MixerAI 2.0 Project Structure

This document outlines the updated project structure and standards for the MixerAI 2.0 application, following best practices for a modern Next.js (App Router) codebase.

## 🧠 Project Overview

MixerAI 2.0 is a Next.js application that uses Azure OpenAI to generate marketing content. Users can manage branded content through a flexible workflow interface powered by Supabase for backend services and PostgreSQL.

## 📁 Directory Structure

All development should be done from the root project folder:

MixerAI 2.0a/

Run all scripts and `npm` commands from this directory.

### ✅ Clean Folder Layout

MixerAI 2.0a/
├── docs/ # Markdown and shell script documentation
├── migrations/ # SQL migration scripts
├── public/ # Static assets (images, icons, etc.)
├── scripts/ # Developer tools and database setup scripts
├── src/ # Source code
│ ├── app/ # App Router: routes and layouts
│ │ ├── api/ # API route handlers
│ │ ├── auth/ # Login, registration, etc.
│ │ └── dashboard/ # Authenticated user interface
│ ├── components/ # Reusable UI components
│ │ ├── content/ # Content-specific UI (e.g. approval workflows)
│ │ ├── dashboard/ # Dashboard widgets and panels
│ │ └── [shared]/ # Shared components (buttons, modals, tables, etc.)
│ ├── lib/ # Logic and service clients
│ │ ├── auth/ # Authentication utilities
│ │ ├── azure/ # Azure OpenAI integration
│ │ ├── supabase/ # Supabase client instance
│ │ └── db.ts # Direct PostgreSQL connection
│ └── types/ # TypeScript types and interfaces
├── .env, .env.local # Environment variables
├── package.json # Project dependencies and scripts
├── tsconfig.json # TypeScript configuration
├── next.config.ts # Next.js configuration
└── README.md # Project overview

## 💡 Development Standards

- Use the **App Router** (`src/app/`) pattern — pages, layouts, and nested routes live here.
- Components should live in `src/components/`, either:
  - **Flat** for shared UI (e.g. `button.tsx`, `toast.tsx`)
  - Or **domain-specific** subfolders (e.g. `dashboard/`, `content/`)
- Shared utilities live in `src/lib/`, structured by concern (`auth/`, `azure/`, etc.)
- Do not reintroduce `ui/`, `mixerai-2.0/`, or duplicate `src/` folders.

## ▶️ Running the App

Run all commands from the **project root directory**.

1. With a local PostgreSQL DB:
```bash
./scripts/use-local-db.sh
npm run dev

2. With Supabase:
npm run dev

📚 Documentation
Located in /docs/:
DOCUMENTATION.md – Full project overview
DATABASE_SETUP.md – PostgreSQL & Supabase setup
CLEAN_DATABASE.md – Test DB reset guide
DATABASE_CONNECTION_ISSUES.md – Troubleshooting
FOLDER_STRUCTURE_FIX.md – This document

