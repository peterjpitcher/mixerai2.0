---
description: 
globs: 
alwaysApply: true
---
# MixerAI 2.0 API Structure

This rule documents the API structure and data flow for the MixerAI 2.0 application.

## API Routes

The application uses Next.js API routes to handle server-side logic:

### Data Endpoints

- [src/app/api/brands/route.ts](mdc:mixerai-2.0/src/app/api/brands/route.ts) - Manages brand data
  - `GET`: Retrieves all brands with content count
  
- [src/app/api/content-types/route.ts](mdc:mixerai-2.0/src/app/api/content-types/route.ts) - Manages content type data
  - `GET`: Retrieves all content types
  
- [src/app/api/content/route.ts](mdc:mixerai-2.0/src/app/api/content/route.ts) - Manages content data
  - `GET`: Retrieves all content with related details (brand, content type, creator)

### Authentication Endpoints

The application uses Supabase for authentication, but may have custom authentication-related endpoints.

## Data Models

The application uses the following data models:

### Brands
```sql
CREATE TABLE brands (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  website_url TEXT,
  country TEXT,
  language TEXT,
  brand_identity TEXT,
  tone_of_voice TEXT,
  guardrails TEXT,
  content_vetting_agencies TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Content Types
```sql
CREATE TABLE content_types (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(name)
);
```

### Content
```sql
CREATE TYPE content_status AS ENUM ('draft', 'pending_review', 'approved', 'published', 'rejected');

CREATE TABLE content (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  brand_id UUID REFERENCES brands(id) ON DELETE CASCADE,
  content_type_id UUID REFERENCES content_types(id) ON DELETE CASCADE,
  workflow_id UUID REFERENCES workflows(id) ON DELETE SET NULL,
  created_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  body TEXT NOT NULL,
  meta_title TEXT,
  meta_description TEXT,
  status content_status NOT NULL DEFAULT 'draft',
  current_step INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## Front-end Data Fetching

Front-end components fetch data from the API routes:

### Brands Page
```typescript
async function fetchBrands() {
  const response = await fetch('/api/brands');
  const data = await response.json();
  return data.success ? data.brands : [];
}
```

### Content Page
```typescript
const fetchContent = async () => {
  const response = await fetch('/api/content');
  const data = await response.json();
  return data.success ? data.content : [];
};
```

## Error Handling

API routes use standard HTTP status codes and return consistent response objects:

```typescript
// Success response
return NextResponse.json({ 
  success: true, 
  data: result.rows 
});

// Error response
return NextResponse.json(
  { success: false, error: 'Error message' },
  { status: 500 }
);
```

## Error Handling - NO FALLBACKS

### Strict No-Fallback Policy

MixerAI 2.0 strictly prohibits the implementation of any fallback mechanisms for AI generation:

1. **NO Fallback Generation**:
   - In `src/lib/azure/openai.ts`, AI generation functions must NEVER fall back to template-based content when API calls fail
   - No default or pre-written content should be returned if the Azure OpenAI API is unavailable

2. **Transparent Error Reporting**:
   - API routes must report actual errors directly to the client
   - All failures must be clearly communicated to users through the UI
   - Error states should suggest trying again later rather than using fallbacks

3. **UI Handling**:
   - UI components must handle error states with appropriate messaging
   - Loading states should be used during API calls
   - Clear error feedback should be shown when calls fail

This approach ensures transparency with users and maintains consistent quality standards across all content generation features.
