DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'tool_run_status') THEN
        CREATE TYPE tool_run_status AS ENUM ('success', 'failure');
    END IF;
END$$;

-- Create tool_run_history table
CREATE TABLE IF NOT EXISTS tool_run_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    tool_name TEXT NOT NULL, -- e.g., 'alt_text_generator', 'metadata_generator', 'content_transcreator'
    brand_id UUID REFERENCES brands(id) ON DELETE SET NULL,
    inputs JSONB NOT NULL,
    outputs JSONB NOT NULL,
    run_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    status tool_run_status NOT NULL DEFAULT 'success',
    error_message TEXT,
    CONSTRAINT check_tool_name CHECK (tool_name IN ('alt_text_generator', 'metadata_generator', 'content_transcreator'))
);

-- Add indexes for faster querying
CREATE INDEX IF NOT EXISTS idx_tool_run_history_user_id ON tool_run_history(user_id);
CREATE INDEX IF NOT EXISTS idx_tool_run_history_tool_name ON tool_run_history(tool_name);
CREATE INDEX IF NOT EXISTS idx_tool_run_history_run_at ON tool_run_history(run_at);

-- RLS Policies for tool_run_history
ALTER TABLE tool_run_history ENABLE ROW LEVEL SECURITY;

-- Drop policies if they exist, then recreate them to ensure idempotency
DROP POLICY IF EXISTS "Users can view their own tool run history" ON tool_run_history;
CREATE POLICY "Users can view their own tool run history"
ON tool_run_history
FOR SELECT
USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own tool run history" ON tool_run_history;
CREATE POLICY "Users can insert their own tool run history"
ON tool_run_history
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Since users should not be able to update or delete history directly via API:
-- NO UPDATE POLICY
-- NO DELETE POLICY
-- (Deletes could be handled by cron jobs for old data if necessary, updates are generally not expected for history)

COMMENT ON TABLE tool_run_history IS 'Stores the history of runs for various AI tools.';
COMMENT ON COLUMN tool_run_history.user_id IS 'The user who ran the tool. Becomes NULL if the user is deleted.';
COMMENT ON COLUMN tool_run_history.tool_name IS 'Identifier for the tool that was run (e.g., alt_text_generator).';
COMMENT ON COLUMN tool_run_history.brand_id IS 'Optional brand associated with this tool run. Becomes NULL if the brand is deleted.';
COMMENT ON COLUMN tool_run_history.inputs IS 'JSON object containing the input parameters for the tool run.';
COMMENT ON COLUMN tool_run_history.outputs IS 'JSON object containing the results generated by the tool.';
COMMENT ON COLUMN tool_run_history.run_at IS 'Timestamp of when the tool run was executed.';
COMMENT ON COLUMN tool_run_history.status IS 'Status of the tool run (success or failure).';
COMMENT ON COLUMN tool_run_history.error_message IS 'Error message if the tool run failed.'; 