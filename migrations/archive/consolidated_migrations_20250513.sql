-- MixerAI 2.0 - Consolidated Migrations
-- This file contains all database migrations in a single file
-- Last updated: 2024-07-27 (Content approval workflow schema updates completed)

-- Create schema
CREATE SCHEMA IF NOT EXISTS public;

-- Create extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create types only if they don't already exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
    CREATE TYPE user_role AS ENUM ('admin', 'editor', 'viewer');
  END IF;
END$$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'content_status') THEN
    CREATE TYPE content_status AS ENUM ('draft', 'pending_review', 'approved', 'published', 'rejected');
  END IF;
END$$;

-- Create tables
CREATE TABLE IF NOT EXISTS brands (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  website_url TEXT,
  country TEXT,
  language TEXT,
  brand_identity TEXT,
  tone_of_voice TEXT,
  guardrails TEXT,
  content_vetting_agencies TEXT,
  brand_color TEXT DEFAULT '#3498db',
  brand_summary TEXT,
  created_by UUID,
  brand_admin_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Attempt to add brand_admin_id column if it doesn't exist on an existing brands table
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'brands') THEN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'brands' AND column_name = 'brand_admin_id') THEN
      ALTER TABLE public.brands ADD COLUMN brand_admin_id UUID REFERENCES profiles(id) ON DELETE SET NULL;
    END IF;
  END IF;
END$$;

COMMENT ON COLUMN brands.brand_color IS 'HEX color code for brand visual identity, generated by AI or manually set';
COMMENT ON COLUMN brands.brand_summary IS 'Short summary of the brand for display in listings';
COMMENT ON COLUMN brands.brand_admin_id IS 'Designated admin for handling rejected content in workflows';

CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  full_name TEXT,
  avatar_url TEXT,
  email TEXT,
  job_title TEXT,
  job_description TEXT,
  company TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Attempt to add columns to profiles if they don't exist on an existing profiles table
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'profiles') THEN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'profiles' AND column_name = 'email') THEN
      ALTER TABLE public.profiles ADD COLUMN email TEXT;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'profiles' AND column_name = 'job_title') THEN
      ALTER TABLE public.profiles ADD COLUMN job_title TEXT;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'profiles' AND column_name = 'job_description') THEN
      ALTER TABLE public.profiles ADD COLUMN job_description TEXT;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'profiles' AND column_name = 'company') THEN
      ALTER TABLE public.profiles ADD COLUMN company TEXT;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'profiles' AND column_name = 'avatar_url') THEN
      ALTER TABLE public.profiles ADD COLUMN avatar_url TEXT;
    END IF;
  END IF;
END$$;

COMMENT ON COLUMN profiles.job_title IS 'User''s job title or role within their organization';
COMMENT ON COLUMN profiles.job_description IS 'Detailed description of the user''s job responsibilities';
COMMENT ON COLUMN profiles.company IS 'Company or organization where the user is employed';
COMMENT ON COLUMN profiles.email IS 'Email address of the user, used for workflows and notifications';

CREATE TABLE IF NOT EXISTS user_brand_permissions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  brand_id UUID REFERENCES brands(id) ON DELETE CASCADE,
  role user_role NOT NULL DEFAULT 'viewer',
  assigned_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, brand_id)
);

CREATE TABLE IF NOT EXISTS content_templates (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  icon TEXT,
  fields JSONB NOT NULL,
  created_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(name)
);

COMMENT ON TABLE content_templates IS 'Stores content template definitions with customizable fields';

-- Explicitly add UNIQUE constraint on name if table exists and constraint is missing
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'content_templates') THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_constraint
      WHERE conrelid = 'public.content_templates'::regclass
        AND conname = 'content_templates_name_key' -- Default name for UNIQUE(name)
        AND contype = 'u'
    ) AND NOT EXISTS (
      SELECT 1
      FROM pg_constraint
      WHERE conrelid = 'public.content_templates'::regclass
        AND conname = 'content_templates_name_unique' -- Custom name we might use
        AND contype = 'u'
    ) THEN
      -- Check if a constraint on 'name' already exists, even with a different name, to avoid errors if we try to add another one.
      IF NOT EXISTS (
          SELECT 1 
          FROM pg_constraint ct
          JOIN pg_attribute attr ON attr.attrelid = ct.conrelid AND attr.attnum = ANY(ct.conkey)
          WHERE ct.conrelid = 'public.content_templates'::regclass 
          AND ct.contype = 'u' 
          AND attr.attname = 'name'
      ) THEN  
        ALTER TABLE public.content_templates ADD CONSTRAINT content_templates_name_unique UNIQUE (name);
      END IF;
    END IF;
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS workflows (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  brand_id UUID REFERENCES brands(id) ON DELETE CASCADE,
  template_id UUID REFERENCES content_templates(id) ON DELETE SET NULL,
  name TEXT NOT NULL,
  steps JSONB NOT NULL DEFAULT '[]',
  created_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Attempt to add template_id column to workflows if it doesn't exist
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'workflows') THEN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'workflows' AND column_name = 'template_id') THEN
      ALTER TABLE public.workflows ADD COLUMN template_id UUID REFERENCES content_templates(id) ON DELETE SET NULL;
    END IF;
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS workflow_user_assignments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  workflow_id UUID REFERENCES workflows(id) ON DELETE CASCADE,
  step_id INTEGER NOT NULL,
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(workflow_id, step_id, user_id)
);

CREATE TABLE IF NOT EXISTS content (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  brand_id UUID REFERENCES brands(id) ON DELETE CASCADE,
  template_id UUID REFERENCES content_templates(id) ON DELETE SET NULL,
  content_data JSONB,
  version INTEGER DEFAULT 1,
  published_version INTEGER,
  workflow_id UUID REFERENCES workflows(id) ON DELETE SET NULL,
  created_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  body TEXT NOT NULL,
  meta_title TEXT,
  meta_description TEXT,
  status content_status NOT NULL DEFAULT 'draft',
  current_step INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Attempt to add template_id column to content if it doesn't exist (should be there from prior migration)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'content') THEN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'content' AND column_name = 'template_id') THEN
      ALTER TABLE public.content ADD COLUMN template_id UUID REFERENCES content_templates(id) ON DELETE SET NULL;
    END IF;
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS content_versions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  content_id UUID REFERENCES content(id) ON DELETE CASCADE NOT NULL,
  workflow_step_identifier TEXT NOT NULL,
  step_name TEXT,
  version_number INT NOT NULL,
  content_json JSONB,
  action_status TEXT NOT NULL,
  feedback TEXT,
  reviewer_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE content_versions IS 'Tracks versions of content as it moves through approval steps';

CREATE TABLE IF NOT EXISTS notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  type TEXT NOT NULL,
  is_read BOOLEAN DEFAULT FALSE,
  action_url TEXT,
  action_label TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS analytics (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  content_id UUID REFERENCES content(id) ON DELETE CASCADE,
  views INTEGER DEFAULT 0,
  shares INTEGER DEFAULT 0,
  likes INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS invitation_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT NOT NULL,
  success BOOLEAN NOT NULL,
  error_message TEXT,
  invited_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
  brand_id UUID REFERENCES brands(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_user_brand_permissions_user_id ON user_brand_permissions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_brand_permissions_brand_id ON user_brand_permissions(brand_id);
CREATE INDEX IF NOT EXISTS idx_content_brand_id ON content(brand_id);
CREATE INDEX IF NOT EXISTS idx_content_template_id ON content (template_id);
CREATE INDEX IF NOT EXISTS idx_content_created_by ON content(created_by);
CREATE INDEX IF NOT EXISTS idx_content_workflow_id ON content(workflow_id);
CREATE INDEX IF NOT EXISTS idx_workflows_brand_id ON workflows(brand_id);
CREATE INDEX IF NOT EXISTS idx_workflows_template_id ON workflows(template_id);
CREATE INDEX IF NOT EXISTS idx_invitation_logs_email ON invitation_logs(email);
CREATE INDEX IF NOT EXISTS idx_content_templates_name ON content_templates (name);
CREATE INDEX IF NOT EXISTS idx_content_versions_content_id_version ON content_versions (content_id, version_number);
CREATE INDEX IF NOT EXISTS idx_content_versions_step_id_created ON content_versions (content_id, workflow_step_identifier, created_at);

-- Create profile creation trigger
CREATE OR REPLACE FUNCTION public.create_profile_for_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url, email, job_title, job_description, company)
  VALUES (
    NEW.id, 
    COALESCE(NEW.raw_user_meta_data->>'full_name', ''),
    COALESCE(NEW.raw_user_meta_data->>'avatar_url', ''),
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'job_title', ''),
    COALESCE(NEW.raw_user_meta_data->>'job_description', ''),
    COALESCE(NEW.raw_user_meta_data->>'company', '')
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger to create a profile when a user is created
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.create_profile_for_user();

-- Set up Row Level Security
ALTER TABLE brands ENABLE ROW LEVEL SECURITY;
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_brand_permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE content_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE workflows ENABLE ROW LEVEL SECURITY;
ALTER TABLE content ENABLE ROW LEVEL SECURITY;
ALTER TABLE content_versions ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics ENABLE ROW LEVEL SECURITY;
ALTER TABLE invitation_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE workflow_user_assignments ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies (dropping if they exist to ensure up-to-date definitions)

-- Profiles table policies
DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone" ON public.profiles
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
CREATE POLICY "Users can update their own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- Brands table policies
DROP POLICY IF EXISTS "Everyone can view brands" ON public.brands;
CREATE POLICY "Everyone can view brands" ON public.brands
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Admins can insert brands" ON public.brands;
CREATE POLICY "Admins can insert brands" ON public.brands
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND role = 'admin'
    )
  );

DROP POLICY IF EXISTS "Admins can update their brands" ON public.brands;
CREATE POLICY "Admins can update their brands" ON public.brands
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = brands.id AND role = 'admin'
    )
  ) WITH CHECK (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = brands.id AND role = 'admin'
    )
  );

DROP POLICY IF EXISTS "Admins can delete their brands" ON public.brands;
CREATE POLICY "Admins can delete their brands" ON public.brands
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = brands.id AND role = 'admin'
    )
  );

-- User Brand Permissions policies
DROP POLICY IF EXISTS "Everyone can view user brand permissions" ON public.user_brand_permissions;
CREATE POLICY "Everyone can view user brand permissions" ON public.user_brand_permissions
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Admins can manage permissions" ON public.user_brand_permissions;
CREATE POLICY "Admins can manage permissions" ON public.user_brand_permissions
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = user_brand_permissions.brand_id AND role = 'admin'
    )
  ) WITH CHECK (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = user_brand_permissions.brand_id AND role = 'admin'
    )
  );

-- Content Templates policies
DROP POLICY IF EXISTS "Everyone can view content templates" ON public.content_templates;
CREATE POLICY "Everyone can view content templates" ON public.content_templates
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Admins can manage content templates" ON public.content_templates;
CREATE POLICY "Admins can manage content templates" ON public.content_templates
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND EXISTS (SELECT 1 FROM user_brand_permissions WHERE user_id = auth.uid() AND role = 'admin' LIMIT 1)
    )
  ) WITH CHECK (
     EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND EXISTS (SELECT 1 FROM user_brand_permissions WHERE user_id = auth.uid() AND role = 'admin' LIMIT 1)
    )
  );

-- Workflows policies
DROP POLICY IF EXISTS "Everyone can view workflows" ON public.workflows;
CREATE POLICY "Everyone can view workflows" ON public.workflows
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Admins can manage workflows" ON public.workflows;
CREATE POLICY "Admins can manage workflows" ON public.workflows
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = workflows.brand_id AND role = 'admin'
    )
  ) WITH CHECK (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = workflows.brand_id AND role = 'admin'
    )
  );

-- Content policies
DROP POLICY IF EXISTS "Everyone can view content" ON public.content;
CREATE POLICY "Everyone can view content" ON public.content
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Editors and Admins can insert content" ON public.content;
CREATE POLICY "Editors and Admins can insert content" ON public.content
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = content.brand_id AND (role = 'editor' OR role = 'admin')
    )
  );

DROP POLICY IF EXISTS "Editors and Admins can update content" ON public.content;
CREATE POLICY "Editors and Admins can update content" ON public.content
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = content.brand_id AND (role = 'editor' OR role = 'admin')
    )
  ) WITH CHECK (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = content.brand_id AND (role = 'editor' OR role = 'admin')
    )
  );

DROP POLICY IF EXISTS "Admins can delete content" ON public.content;
CREATE POLICY "Admins can delete content" ON public.content
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM user_brand_permissions 
      WHERE user_id = auth.uid() AND brand_id = content.brand_id AND role = 'admin'
    )
  );

-- Content Versions policies (New)
DROP POLICY IF EXISTS "Users can view versions of content they can view" ON public.content_versions;
CREATE POLICY "Users can view versions of content they can view" ON public.content_versions
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM content c
      WHERE c.id = content_versions.content_id AND (
        EXISTS (
          SELECT 1 FROM user_brand_permissions ubp
          WHERE ubp.user_id = auth.uid() AND ubp.brand_id = c.brand_id
        )
      )
    )
  );

-- Notifications policies
DROP POLICY IF EXISTS "Users can view their own notifications" ON public.notifications;
CREATE POLICY "Users can view their own notifications" ON public.notifications
  FOR SELECT USING (user_id = auth.uid());

DROP POLICY IF EXISTS "Users can update their own notifications" ON public.notifications;
CREATE POLICY "Users can update their own notifications" ON public.notifications
  FOR UPDATE USING (user_id = auth.uid()) WITH CHECK (user_id = auth.uid());

-- Analytics policies
DROP POLICY IF EXISTS "Everyone can view analytics" ON public.analytics;
CREATE POLICY "Everyone can view analytics" ON public.analytics
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "System can insert analytics" ON public.analytics;
CREATE POLICY "System can insert analytics" ON public.analytics
  FOR INSERT WITH CHECK (true);

DROP POLICY IF EXISTS "System can update analytics" ON public.analytics;
CREATE POLICY "System can update analytics" ON public.analytics
  FOR UPDATE USING (true) WITH CHECK (true);

-- Grant permissions
GRANT ALL ON SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO postgres, anon, authenticated, service_role;

-- Insert initial content templates (example from content-template-system.sql)
-- This should be reviewed and aligned with actual required templates
INSERT INTO content_templates (name, description, icon, fields, created_by, created_at, updated_at)
VALUES 
(
  'Basic Article', 
  'A simple article template with title, body, and metadata', 
  'icon-article',
  '{
    "inputFields": [
      {"id": "title", "name": "Title", "type": "shortText", "required": true, "options": {"minLength": 10, "maxLength": 100}, "aiSuggester": false},
      {"id": "keywords", "name": "Keywords", "type": "tags", "required": true, "options": {"maxTags": 10}, "aiSuggester": true, "aiPrompt": "Generate up to 10 keywords for an article with the title: {{title}}"},
      {"id": "brief", "name": "Brief", "type": "longText", "required": true, "options": {"minWords": 50, "maxWords": 200}, "aiSuggester": false}
    ],
    "outputFields": [
      {"id": "contentBody", "name": "Content Body", "type": "richText", "aiAutoComplete": true, "aiPrompt": "Generate an article with the title: {{title}}. Keywords: {{keywords}}. Brief: {{brief}}. The article should be around 800 words."},
      {"id": "metaDescription", "name": "Meta Description", "type": "plainText", "options": {"maxLength": 160}, "aiAutoComplete": true, "aiPrompt": "Generate a compelling meta description (max 160 characters) for an article with the title: {{title}}. Brief: {{brief}}"}
    ]
  }'::jsonb,
  NULL,
  NOW(),
  NOW()
),
(
  'Product Description', 
  'Template for creating product descriptions with features and benefits', 
  'icon-product',
  '{
    "inputFields": [
      {"id": "productName", "name": "Product Name", "type": "shortText", "required": true, "options": {"maxLength": 100}, "aiSuggester": false},
      {"id": "productCategory", "name": "Product Category", "type": "select", "required": true, "options": {"choices": ["Electronics", "Clothing", "Home", "Beauty", "Food", "Other"]}, "aiSuggester": false},
      {"id": "keyFeatures", "name": "Key Features", "type": "longText", "required": true, "aiSuggester": true, "aiPrompt": "List 5-7 key features for a product called {{productName}} in the {{productCategory}} category."},
      {"id": "targetAudience", "name": "Target Audience", "type": "shortText", "required": true, "aiSuggester": true, "aiPrompt": "Suggest a target audience for a product called {{productName}} in the {{productCategory}} category."}
    ],
    "outputFields": [
      {"id": "shortDescription", "name": "Short Description", "type": "plainText", "options": {"maxLength": 200}, "aiAutoComplete": true, "aiPrompt": "Write a compelling short description (max 200 characters) for a product called {{productName}} in the {{productCategory}} category with these key features: {{keyFeatures}}. Target audience: {{targetAudience}}."},
      {"id": "fullDescription", "name": "Full Description", "type": "richText", "aiAutoComplete": true, "aiPrompt": "Write a detailed product description for {{productName}} in the {{productCategory}} category. Include these key features: {{keyFeatures}}. The description should appeal to {{targetAudience}} and include benefits, use cases, and a compelling reason to buy. Format with headings, bullet points for features, and emphasize the key selling points."},
      {"id": "specifications", "name": "Specifications", "type": "html", "aiAutoComplete": true, "aiPrompt": "Generate an HTML table with specifications for {{productName}} based on these features: {{keyFeatures}}. Include rows for dimensions, materials, and other relevant specifications inferred from the product category {{productCategory}}."}
    ]
  }'::jsonb,
  NULL,
  NOW(),
  NOW()
)
ON CONFLICT (name) DO NOTHING;

-- Insert test admin user (uncomment for development environments)
-- INSERT INTO profiles (id, full_name, avatar_url, job_title)
-- VALUES (
--   '00000000-0000-0000-0000-000000000001',
--   'Admin User',
--   'https://api.dicebear.com/7.x/avataaars/svg?seed=admin',
--   'System Administrator'
-- )
-- ON CONFLICT DO NOTHING;

-- -- Insert example brands (uncomment for development environments)
-- INSERT INTO brands (name, country, language, brand_identity, tone_of_voice, guardrails, brand_color, created_by)
-- VALUES 
--   (
--     'Demo Brand',
--     'United Kingdom',
--     'English',
--     'A premium technology brand focused on innovation and sustainability.',
--     'Professional, confident, and approachable. Use active voice and concise sentences.',
--     'Avoid negative language about competitors. Focus on benefits rather than features.',
--     '#14599f',
--     '00000000-0000-0000-0000-000000000001'
--   ),
--   (
--     'Tech Innovators',
--     'United States',
--     'English',
--     'A cutting-edge technology brand that pushes boundaries.',
--     'Technical yet accessible. Use precise language and industry terms appropriately.',
--     'Focus on innovation and benefits. Avoid overused tech buzzwords.',
--     '#cf0d2a',
--     '00000000-0000-0000-0000-000000000001'
--   )
-- ON CONFLICT DO NOTHING;

-- -- Assign admin user to brands with admin role (uncomment for development environments)
-- INSERT INTO user_brand_permissions (user_id, brand_id, role)
-- SELECT 
--   '00000000-0000-0000-0000-000000000001',
--   id,
--   'admin'
-- FROM brands
-- ON CONFLICT DO NOTHING; 